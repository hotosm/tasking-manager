{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Tasking Manager","text":"<p>The most popular tool for teams to coordinate mapping on OpenStreetMap. With this web application, an area of interest can be defined and divided up into smaller tasks that can be completed rapidly. It shows which areas need to be mapped and which areas need a review for quality assurance. You can see the tool in action: log into the widely used HOT Tasking Manager and start mapping.</p> <p>This is Free and Open Source Software. You are welcome to use the code and set up your own instance. The Tasking Manager has been initially designed and built by and for the Humanitarian OpenStreetMap Team, and is nowadays used by many communities and organizations.</p>"},{"location":"#get-involved","title":"Get involved!","text":"<ul> <li>Join a Tasking Manager working group</li> <li>Start by reading our Code of conduct</li> <li>Get familiar with our contributor guidelines   explaining the different ways in which you can support this project!   We need your help!</li> <li>Read the monthly update blogs on OSM Discourse.</li> </ul>"},{"location":"#product-roadmap","title":"Product Roadmap","text":"<p>We have included below a high level roadmap/plan [subject to change] that can be used as an overview.</p>"},{"location":"#instances","title":"Instances","text":"<ul> <li>HOT Tasking Manager (production)</li> <li>HOT Tasking Manager (staging)</li> <li>TeachOSM</li> <li>OpenStreetMap Indonesia</li> <li>OpenStreetMap US</li> <li>Map My Kerala</li> <li>OpenHistoricalMap</li> <li>Oceania Tasking Manager</li> </ul>"},{"location":"LICENSE/","title":"License","text":"<p>BSD 2-Clause License</p> <p>Copyright (c) 2017, Humanitarian OpenStreetMap Team All rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ul> <li> <p>Redistributions of source code must retain the above copyright notice, this   list of conditions and the following disclaimer.</p> </li> <li> <p>Redistributions in binary form must reproduce the above copyright notice,   this list of conditions and the following disclaimer in the documentation   and/or other materials provided with the distribution.</p> </li> </ul> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>"},{"location":"about/","title":"Tasking Manager","text":"<p>The most popular tool for teams to coordinate mapping on OpenStreetMap. With this web application, an area of interest can be defined and divided up into smaller tasks that can be completed rapidly. It shows which areas need to be mapped and which areas need a review for quality assurance. You can see the tool in action: log into the widely used HOT Tasking Manager and start mapping.</p> <p>This is Free and Open Source Software. You are welcome to use the code and set up your own instance. The Tasking Manager has been initially designed and built by and for the Humanitarian OpenStreetMap Team, and is nowadays used by many communities and organizations.</p>"},{"location":"about/#get-involved","title":"Get involved!","text":"<ul> <li>Join a Tasking Manager working group</li> <li>Start by reading our Code of conduct</li> <li>Get familiar with our contributor guidelines   explaining the different ways in which you can support this project!   We need your help!</li> <li>Read the monthly update blogs on OSM Discourse.</li> </ul>"},{"location":"about/#product-roadmap","title":"Product Roadmap","text":"<p>We have included below a high level roadmap/plan [subject to change] that can be used as an overview.</p>"},{"location":"about/#instances","title":"Instances","text":"<ul> <li>HOT Tasking Manager (production)</li> <li>HOT Tasking Manager (staging)</li> <li>TeachOSM</li> <li>OpenStreetMap Indonesia</li> <li>OpenStreetMap US</li> <li>Map My Kerala</li> <li>OpenHistoricalMap</li> <li>Oceania Tasking Manager</li> </ul>"},{"location":"dataflow/","title":"Tasking Manager Dataflow","text":""},{"location":"dataflow/#activity","title":"Activity","text":"<p>The Tasking Manager has several user data flows, as there are differences between a project manager, a mapper, and a validator as seen in this diagram.</p> <p> </p> <p>Initially most Tasking Manager projects start with a disaster notification. The activation team discusses the notification, and if a response is needed creates a project. The project is an Area Of Interest (AOI) as a polygon, and a description and instructions. Then the AOI is split into tasks.</p> <p>Then when the project is announced, mappers select a task, and map the desired features for the project. Once the complete a task, it's marked as mapped, and then the mapper can select another task, and so on.</p> <p>Then the validator reviews all the tasks marked as mapped. There is more information on the Validation process at this link.</p>"},{"location":"dataflow/#solution-user","title":"Solution User","text":""},{"location":"dataflow/#component","title":"Component","text":"<p>The Tasking Manager has multiple components. WHat the user sees is the REACT based frontend in their browser.  </p> <p>The backend for the Tasking Mamnager is written using Flask, which is in python. This supplies the REST API, which the frontend uses. This API is also open to other projects.</p> <p>The data of course is OpenStreetMap, which is stored in a postgres database.</p>"},{"location":"dataflow/#conceptual","title":"Conceptual","text":"<p>The Tasking Manager uses other projects for some of it's data needs of the backend. This includes Oshome for mapping statistics, the HOT raw data API for data extracts, and OpenStreetMap of course.</p> <p> </p>"},{"location":"dataflow/#information-flow","title":"Information Flow","text":"<p>This diagram shows the other projects that the Tasking Manager exchanges informstion with. OpenStreetNap(OSM) of course supplies data, and data from Tasking Manager projects goes into OSM. OpenAerialMap may be used as a source of imagery. Also projects may be transfered thh the Field Mapping Tasking Manager(FMTM).</p> <p> </p>"},{"location":"validation/","title":"Validation","text":"<p>Validation is the final step of the mapping process. It is necessary to ensure good quality data. Validation requires a slightly different skill set than just being a good mapper. Being an experienced mapper is a good start of course.</p> <p>For Tasking Manager, validators review the work of the remote mappers. It is not unusual that features get misidentified by the mappers due to poor imagery. Validators have much experience with identifying obscure buildings types in different countries.</p> <p>Being a validator is more than being a mapper. As a person dealing with quality issues, a validator is also a mentor to other mappers, improving their skills as well. Mentoring of course requires an ability to communicate mistakes with empathy and understanding, as we all make mistakes...</p>"},{"location":"validation/#references","title":"References","text":"<p>There are multiple good sources for information on validation for more detail.</p> <ul> <li> <p>After you\u2019ve had some experience mapping, you may find yourself correcting other contributors work. /MissingMaps_validation_faq_en.pdf</p> </li> <li> <p>Before validating the work of others, you should be an experienced   mapper yourself. Validating_Data_EN.pdf</p> </li> <li> <p>Mappers wishing to become validators should take time to become   experienced at mapping and learn what validation entails before   submitting an application. validators-experienced-mappers-making-an-outsized-difference/</p> </li> <li> <p>Validation is the process of an experienced mapper reviewing the   mapping of the initial mapper of a project task. Validation</p> </li> <li> <p>In OpenStreetMap anyone can validate as long as they do not validate   their own work. However, they can validate another mapper's   contributions. Validating Data</p> </li> <li> <p>Mappers that wish to become validators must have experience with   tracing and tagging complex features in OSM, outstanding image   interpretation skills, a positive attitude and manner towards other   users, and a willingness to learn new software. Validation   hub</p> </li> </ul>"},{"location":"working-groups/","title":"HOT Tasking Manager Monthly Meet Up","text":"<p>HOT runs monthly Tech and Innovation Working Group Meetings that anyone is welcome to join. They are open for technical and non-technical people who are interested in open source software and geospatial tech. There is a sub-group focused specifically on the HOT Tasking Manager called \"HOT Tasking Manager Meet Ups\". We hope to see you there!</p>"},{"location":"working-groups/#purpose","title":"Purpose","text":"<p>The purpose of the meet up is to connect with other Tasking Manager enthusiasts, share ideas on how best to collaborate in prioritising, testing and proposing changes in improving the Tasking Manager!</p>"},{"location":"working-groups/#how-to-join","title":"How to join:","text":"<ul> <li>Join the HOT slack chat and find us in the <code>#tasking-manager</code> channel.</li> <li>Register using this form</li> </ul>"},{"location":"working-groups/#when","title":"When","text":"<p>Third Wednesdays of each month, 12:00 o'clock UTC (see the working group calendar for next meeting).</p>"},{"location":"working-groups/#rolling-agenda-meeting-notes","title":"Rolling agenda meeting notes","text":"<p>Take a look at the agenda and notes from each meeting.</p>"},{"location":"developers/code_of_conduct/","title":"Code of conduct","text":"<p>(The latest version can be found at https://www.hotosm.org/code-of-conduct)</p> <p>Welcome to Humanitarian OpenStreetMap Team. HOT is committed to providing a welcoming and safe environment for people of all races, gender identities, gender expressions, sexual orientations, physical abilities, physical appearances, socio-economic backgrounds, nationalities, ages, religions, and beliefs.</p> <p>The HOT community principles are:</p> <p>Be friendly and patient. Be generous and kind in both giving and accepting critique. Critique is a natural and important part of our culture. Good critiques are kind, respectful, clear, and constructive, focused on goals and requirements rather than personal preferences. You are expected to give and receive criticism with grace. Be considerate in speech and actions, and actively seek to acknowledge and respect the boundaries of fellow attendees.</p> <p>Be welcoming. We strive to be a community that welcomes and supports people of all backgrounds and identities. Some examples of behavior that contributes to creating a positive environment include:</p> <ul> <li> <p>Using welcoming and inclusive language.</p> </li> <li> <p>Being respectful of differing viewpoints and experiences.</p> </li> <li> <p>Gracefully accepting constructive criticism.</p> </li> <li> <p>Showing empathy towards other community members.</p> </li> <li> <p>Placing collective interest before your own interest.</p> </li> </ul> <p>Be considerate. Your work will be used by other people, and you in turn will depend on the work of others. Any decision you take will affect users and colleagues, and you should take those consequences into account when making decisions. Remember that we're a world-wide community, so you might not be communicating in someone else's primary language.</p> <p>Be respectful. Not all of us will agree all the time, but disagreement is no excuse for poor behavior and poor manners. We might all experience some frustration now and then, but we cannot allow that frustration to turn into a personal attack. It\u2019s important to remember that a community where people feel uncomfortable or threatened is not a productive one. Members of the HOT community should be respectful when dealing with other members as well as with people outside the HOT community.</p> <p>Be careful in your word choice. We are a global community of professionals, and we conduct ourselves professionally. Be kind to others. Do not insult or put down other participants. Harassment and other exclusionary behavior aren't acceptable. This includes, but is not limited to:</p> <ul> <li> <p>Violent threats or language directed against another person.</p> </li> <li> <p>Discriminatory jokes and language.</p> </li> <li> <p>Posting sexually explicit or violent material.</p> </li> <li> <p>Posting (or threatening to post) other people's personally   identifying information (\"doxing\").</p> </li> <li> <p>Personal insults, especially those using racist or sexist terms.</p> </li> <li> <p>Unwelcome sexual attention.</p> </li> <li> <p>Advocating for, or encouraging, any of the above behavior.</p> </li> <li> <p>Repeated harassment of others. In general, if someone asks you to   stop, then stop.</p> </li> </ul> <p>Assume all communications are positive. Always remain polite, and assume good faith. It is surprisingly easy to misunderstand each other, be it online or in person, particularly in such a culturally diverse setting as ours. Misunderstandings are particularly easy to arise when we are in a rush, or otherwise distracted. Please ask clarifying questions before assuming that the communication was inappropriate.</p> <p>When we disagree, try to understand why. Disagreements, both social and technical, happen easily and often. It is important that we resolve such disagreements and differing views constructively. At times it can be hard to appreciate a viewpoint that contradicts your own perceptions. Instead of pushing back, try to understand where the other person is coming from, and don\u2019t be afraid to ask questions. You can be most helpful if your own replies serve to clarify, rather than to escalate an issue. Also don\u2019t forget that it can be easy to make mistakes, and allow for the possibility that the mistake may have been yours. When this happens it is better to resolve the issue together, and to learn from the experience together, than to place blame.</p> <p>Original text courtesy of the Speak Up! project.</p> <p>Further sources:</p> <ul> <li> <p>Ada Initiative: HOWTO design a code of conduct for your community</p> </li> <li> <p>Algorithm Club Code of Conduct</p> </li> <li> <p>American Red Cross GIS Team Code of Conduct</p> </li> <li> <p>Contributor Covenant \u2013 A Code of Conduct for Open Source Projects</p> </li> <li> <p>Django Code of Conduct</p> </li> <li> <p>Mozilla Community Participation Guidelines</p> </li> <li> <p>Vox Media Code of Conduct</p> </li> </ul>"},{"location":"developers/code_of_conduct/#complaint-handling-process","title":"Complaint Handling Process","text":"<p>As a first measure, it is preferable to work out issues directly with the people involved, or to work with other Community Members who can help you resolve the issue. This may take several forms:</p> <ul> <li> <p>Talk with one another. Assume that communications are positive and   that people are treating each other with respect. Cues about   emotions are often lacking in digital communications. Many of our   modes of digital communication tend towards brevity, which can be   easier to interpret incorrectly as being negative.</p> </li> <li> <p>Contact a representative of the Community Working   Group, which   exists to support the HOT Community. Representatives are available   to discuss any concerns about behaviour within the community, or   ideas to promote positive behaviours. You can email them at   community@hotosm.org.</p> </li> <li> <p>Contact a representative of the Governance Working   Group, which   drafted these recommendations and the CoC. Representatives are   available to provide advice on particular scenarios, as well as on   the processes around the CoC.</p> </li> <li> <p>Contact the HOT Chair of Voting Members.</p> </li> <li> <p>Contact a HOT Board Member. Board   members are well versed in the community and its management. They   can offer advice on your particular situation, and know the   resources of the organization that may be available to you.</p> </li> <li> <p>Contact the HOT Community Partnerships Manager.</p> </li> </ul> <p>When these informal processes fail, or when a situation warrants an immediate response by HOT, you can evoke the HOT Policy and Code of Conduct Complaint Handling Process. This process was adopted by HOT Voting Members in 2016 to provide a more formal means of enforcement for our community standards. You start it by emailing complaints@hotosm.org with a description of your complaint, your name, and the name of the offending party. All complaints will be considered confidential. The full process is described here</p>"},{"location":"developers/contributing-guidelines/","title":"Code contributions","text":"<p>Project and code leads are experienced HOT volunteer and staff developers and the main points of contact for the project. They are also the final reviewers of issues and pull requests. Code leads will review pull requests and provide feedback. The purpose of this role is to help contributors, provide consistency and ensure code quality.</p> <p>Currently, HOT has been collaborating with the developers at Naxa to help maintain and support community development on the project. Their role as leaders on the project and in the development community has greatly benefitted the Tasking Manager development and sustainability of the project. Previously Kathmandu Living Labs has been maintained the Tasking Manager.</p> <p>All of the development is going to happen in the project repository and everything we work on shall be related to and documented in issues of the related issue queue.</p>"},{"location":"developers/contributing-guidelines/#code-basics","title":"Code basics","text":"<ol> <li>Write tests for all new backend features and use a tool (like    coveralls.io) to measure test coverage.</li> <li>Consider writing tests when building new frontend.</li> <li>Stick to pep8 python style guide for the backend.</li> <li>Apply ESLint and prettier style guide rules    for the frontend code.</li> <li>Export translatable strings with <code>make refresh-translatables</code> and    include them in your commit.</li> <li>When creating new environment variables or changing existing ones,    make sure to add them to the AWS Cloudformation template (see the    deployment docs) and note them in the    Pull Request.</li> </ol>"},{"location":"developers/contributing-guidelines/#code-collaboration-and-version-control","title":"Code collaboration and version control","text":"<p>Note: We use git flow as our branching model. Read more here and here, and refer to this cheatsheet if you aren\u2019t familiar with it yet. You probably want to install a helper application to facilitate the flow a bit.</p> <ul> <li>Use branches in the tasking-manager project. This allows others to   rebase your branch when they are reviewing or to continue started   work. We follow git flow\u2019s naming convention</li> <li><code>feature/ISSUENUMBER-SHORT-TITLE-SEPARATED-BY-HYPHENS</code> for general     new features you are working on</li> <li><code>hotfix/ISSUENUMBER-SHORT-TITLE-SEPARATED-BY-HYPHENS</code> for     important bug fixes that need to go into the main releases as soon     as possible</li> <li><code>bugfix/ISSUENUMBER-SHORT-TITLE-SEPARATED-BY-HYPHENS</code> for   non-critical fixes that can be deployed in the next scheduled   release. (e.g. for a normal feature   feature/893-restrict-available-editors).</li> <li>Make sure your PR is always up to date and rebased with the latest   develop branch.</li> <li>Try to build a nice and understandable commit history of the   project. Please use meaningful commit   messages   and try to unite/squash related work into one commit. Eventually we   will squash commits before merging a new feature or hotfix into the   main branches (develop and master).</li> <li>Give meaningful and understandable testing instructions in your   PR. Highlight important preconditions and try to make life easier   for the reviewer.</li> </ul>"},{"location":"developers/contributing-guidelines/#comments","title":"Comments","text":"<p>Sometimes it's not apparent from the code itself what it does, or more importantly, why it does that. Good comments help your fellow developers understand the code better and make sure that it is doing the right thing.</p> <p>When developing, you should:</p> <ul> <li> <p>Comment your code - do not go overboard, but explain the bits which might be difficult to understand. As a general rule of thumb, try to explain what the code does, why it does it, and why it should be the way it is or where it could be improved in the future.</p> </li> <li> <p>Check existing comments to ensure they are not misleading.</p> </li> </ul>"},{"location":"developers/contributing-guidelines/#committing","title":"Committing","text":"<p>When you submit pull requests, the project maintainer has to read them and understand them. This is difficult enough at the best of times, and misunderstanding pull requests can lead to them being more difficult to merge. To help with this, when making pull requests you should:</p> <ul> <li>Split up large changes into smaller units of functionality.</li> <li>Keep your commit messages relevant to the changes in each individual unit.</li> </ul> <p>When writing commit messages please try and stick to the same style as other commits, namely:</p> <ul> <li>A one line summary, starting with a capital letter.</li> <li>A blank line.</li> <li>Full description, as proper sentences.</li> </ul> <p>For simple commits the one line summary is often enough and the body of the commit message can be left out.</p> <p>Before sending a PR, make sure you run the following commands and include the changes in your commit.</p> <ul> <li>Code formatting:</li> <li>Format all backend code by running Black: <code>black manage.py backend tests migrations</code> or <code>uv run lint</code></li> <li>Format all frontend code with prettier     either by configuring your     editor or by running     <code>yarn prettier</code> inside the <code>frontend</code> directory.</li> <li>Coding standards: Make sure you adhere to the coding standards   eventually risen by Flake8:   <code>flake8 manage.py backend tests migrations</code> or <code>uv run flake8</code></li> <li>Prepare for translations: In case you have introduced new strings on   the frontend, the translation source file must be updated this can   be done via <code>make refresh-translatables</code> or <code>yarn build-locales</code>   (inside the <code>frontend</code> directory).</li> </ul> <p>If you have forked this project on GitHub then the best way to submit your patches is to push your changes back to your GitHub repository and then send a \"pull request\" via GitHub to the main repository.</p> <p>You can use this git pre-commit hook to format both the frontend and the backend code:</p> <pre><code>#!/bin/sh\nJS_FILES=$(git diff --cached --name-only --diff-filter=ACMR \"*.js\" \"*.jsx\" | sed 's| |\\\\ |g')\nPY_FILES=$(git diff --cached --name-only --diff-filter=ACMR \"*.py\" | sed 's| |\\\\ |g')\n([ -z \"$JS_FILES\" ] &amp;&amp; [ -z \"$PY_FILES\" ]) &amp;&amp; exit 0\n\n# Prettify all selected files\necho \"$JS_FILES\" | xargs ./frontend/node_modules/.bin/prettier --write\necho \"$PY_FILES\" | xargs black\n\n# Add back the modified/prettified files to staging\necho \"$JS_FILES\" | xargs git add\necho \"$PY_FILES\" | xargs git add\n\nexit 0\n</code></pre>"},{"location":"developers/contributing-guidelines/#documentation","title":"Documentation","text":"<p>Project documentation should be in Markdown format, and in a docs subdirectory. While it is possible to use HTML in Markdown documents for tables and images, it is prefered to use the Markdown style as it's much easier to read.</p>"},{"location":"developers/contributing-guidelines/#reviewing-pull-requests","title":"Reviewing Pull Requests","text":"<p>We welcome community members to review Pull Request. The process to review a PR  is by adding a comment if already reviewed and everything looks good, or specifying what change is needed.</p>"},{"location":"developers/contributing/","title":"Contributing to the Tasking Manager","text":""},{"location":"developers/contributing/#welcome","title":"Welcome","text":"<p>First off, I'm really glad you're reading this, because we need volunteer developers to help improve the Tasking Manager.!</p> <p>We welcome and encourage contributors of all skill levels and we are committed to making sure your participation in our tech collective is inclusive, enjoyable and rewarding. If you have never contributed to an open-source project before, we are a good place to start and will make sure you are supported every step of the way. If you have any questions, please ask!</p> <p>We are collaborating with Naxa on the maintenance of the Tasking Manager - expect to hear a lot from all of us on Github :-)</p> <p>There are many ways to contribute to the Tasking Manager Project:</p>"},{"location":"developers/contributing/#report-bugs-and-suggest-improvements","title":"Report bugs and suggest improvements:","text":"<p>The issue queue is the best way to get started. There are issue templates for BUGs and FEATURES that you can use, or you can create your own. Once you have submitted an issue, it will be assigned one label out of the following label categories:</p> <ul> <li>Backlog:  Backlog=triage will first be assigned to any new issues</li> <li>Component</li> </ul> <p>On a monthly basis, we will collaboratively triage issues from the backlog=triage and assign one of the below labels:</p> <ul> <li>Assigned: once reviewed the issue will be assigned either to   hot_tech OR tm_collective. Issues assigned to tm_collective are   where we really need your help!</li> <li>Type: specifying whether the issue is a bug or feature/enhancement</li> <li>Priority: specifying the priority level for each issue. We want   to collaboratively agree on the criteria for prioritisation.</li> <li>Status: specifying whether the issue is in progress or done.</li> <li>Experience: we have added a beginner label for good first   issues. We will work with the community to update the labels in this   category and make them suitable.</li> </ul> <p>Note: Issues older than 6 months from the point of raising the issue with no engagement will be labelled as archived.</p>"},{"location":"developers/contributing/#testing","title":"Testing","text":"<p>Test a bug fix or new feature. Once an issue has been addressed and Pull Request (PR) change deployed to the Tasking Manager Staging site, you will be able to view and test the change on the staging site. If you notice any issues while testing, please comment on the PR directly.</p>"},{"location":"developers/contributing/#code-contributions","title":"Code contributions","text":"<p>Create pull requests (PRs) for changes that you think are needed. We would really appreciate your help! We ask that you follow our coding contribution guidelines</p> <p>Skills with the following would be beneficial:</p> <ul> <li>Python</li> <li>FastAPI</li> <li>Javascript</li> <li>React</li> <li>Docker</li> <li>CI/CD workflows</li> </ul> <p>Our latest task board can be found here.</p>"},{"location":"developers/contributing/#translating","title":"Translating","text":"<p>Review or submit language translations. Translations are important as it makes Tasking Manager more efficient when it supports local languages.</p>"},{"location":"developers/contributing/#thank-you","title":"Thank you!","text":"<p>Thank you very much in advance for your contributions!! Please ensure you refer to our Code of Conduct when you contribute!</p> <p>If you've read the guidelines, but you are still not sure how to contribute on Github, please reach out to us via our [ HOT Tech Support page](https://hotosm.atlassian.net/servicedesk/customer/portal/4 and we will be happy to help!</p>"},{"location":"developers/development-setup/","title":"Development setup","text":""},{"location":"developers/development-setup/#architecture","title":"Architecture","text":"<p>The Tasking Manager is composed of two parts:</p> <ul> <li>Frontend: A user interface built using React.</li> <li>Backend: A database and API built using Python.</li> </ul> <p>The two parts can be developed independently of each other.</p>"},{"location":"developers/development-setup/#osm-auth","title":"OSM Auth","text":"<p>The Tasking Manager uses OAuth2 with OSM to authenticate users.</p> <p>In order to use the frontend, you may need to create keys for OSM:</p> <ol> <li>Login to OSM    (If you do not have an account yet, click the signup    button at the top navigation bar to create one).</li> </ol> <p>Click the drop down arrow on the top right of the navigation bar    and select My Settings.</p> <ol> <li>Register your Tasking Manager instance to OAuth 2 applications.</li> </ol> <p>Put your login redirect url as <code>http://127.0.0.1:3000/authorized</code></p> <p>Note: <code>127.0.0.1</code> is required for debugging instead of <code>localhost</code> due to OSM restrictions.</p> <ol> <li> <p>Permissions required:</p> <ul> <li>Read user preferences (read_prefs).</li> <li>Modify the map (write_api).</li> </ul> </li> <li> <p>Now save your Client ID and Client Secret for the next step.</p> </li> </ol>"},{"location":"developers/development-setup/#configure-the-dot-env-file","title":"Configure The Dot Env File","text":"<ol> <li> <p>Copy the <code>example.env</code> to <code>tasking-manager.env</code>.</p> <pre><code>cp example.env tasking-manager.env\n</code></pre> </li> <li> <p>Update the following variables</p> <pre><code>TM_CLIENT_ID=from-previous-step\nTM_CLIENT_SECRET=from-previous-step\n</code></pre> </li> </ol> <p>If you are a frontend developer and do not wish to configure the backend, you can use our staging server API.</p> <p>Update the variable:</p> <p><code>TM_APP_API_URL='https://tasking-manager-staging-api.hotosm.org'</code></p> <p>before running the <code>yarn start</code> command.</p> <p>Be aware that the staging API can be offline while we are deploying newer versions to the staging server and that you'll not have access to some management views due to permissions. Check the configuration section to learn more about how to configure Tasking Manager.</p> <p>For more details see the configuration section.</p>"},{"location":"developers/development-setup/#docker","title":"Docker","text":"<p>The easiest option to get started with all components may be using Docker.</p>"},{"location":"developers/development-setup/#requirements","title":"Requirements","text":"<p>Docker Engine must be available locally.</p>"},{"location":"developers/development-setup/#running-tasking-manager","title":"Running Tasking Manager","text":"<p>Once you have the docker engine running, Quickly generate an environment file from an existing <code>example.env</code>. <pre><code>cp example.env tasking-manager.env\n</code></pre></p> <p>Now you can proceed with starting the services.</p> <pre><code>docker compose --env-file tasking-manager.env up -d\n</code></pre> <p>Tasking Manager should be available from: http://127.0.0.1:3000</p>"},{"location":"developers/development-setup/#optional-changing-the-dev-port-or-dotenv-file","title":"(Optional) Changing the dev port or dotenv file","text":"<p>You change the default port from <code>3000</code> to any other port.</p> <p>However, you must change your OAuth redirect URL to reflect this, in addition to any variables including a port, e.g. TM_APP_BASE_URL.</p> <p>The default dotenv file can also be changed.</p> <p><pre><code>TM_DEV_PORT=9000 docker compose --env-file tasking-manager.env up -d\n</code></pre> <pre><code>docker compose --env-file tasking-manager.env up -d\n</code></pre></p>"},{"location":"developers/development-setup/#optional-overriding-docker-composeyml","title":"(Optional) Overriding <code>docker-compose.yml</code>","text":"<p>If you want to add custom configuration for the docker services. You can make a copy of <code>docker-compose.override.sample.yml</code> which you can edit as per your need.</p> <p>Create an override file from sample. <pre><code>cp docker-compose.override.sample.yml docker-compose.override.yml\n</code></pre></p>"},{"location":"developers/development-setup/#external-or-self-hosted-database","title":"External or Self Hosted Database","text":"<p>If you want to use your local postgresql server or some other exter database service. Find these sets of environment variables in <code>tasking-manager.env</code> <pre><code>POSTGRES_DB=tasking-manager\nPOSTGRES_USER=tm\nPOSTGRES_PASSWORD=tm\nPOSTGRES_ENDPOINT=&lt;replace-with-your-database-endpoint&gt;\nPOSTGRES_PORT=5432\n</code></pre></p> <p>NOTE:  If database server is self managed on your local machine, Use your machine's ip address. Also make sure it can be reachable from <code>tm-backend</code> container.</p> <p>Once Updated, recreate containers with <pre><code>docker compose --env-file tasking-manager.env up -d\n</code></pre></p>"},{"location":"developers/development-setup/#frontend-only-deployment","title":"Frontend Only Deployment","text":"<p>If you are looking to deploy only Frontend service with docker, You will need to make sure the following env vars are corrent in <code>tasking-manager.env</code></p> <p><pre><code>TM_APP_API_URL=http://127.0.0.1:5000\n</code></pre> This refers to the backend service that you are going to consume, If you don't have a Tasking Manager backend instance you can use the staging server hosted by hotosm. <pre><code>TM_APP_API_URL=https://tasking-manager-staging-api.hotosm.org\n</code></pre> Then proceed with starting only frontend service with docker. <pre><code>docker compose --env-file tasking-manager.env up -d tm-frontend\n</code></pre></p> <p>Check server logs with <pre><code>docker logs tasking-manager-main-tm-frontend-1 -f\n\n&gt; TaskingManager-frontend@0.1.0 patch-rapid\n&gt; bash -c \"cp patch/rapid-imagery.min.json public/static/rapid/data/imagery.min.json\"\n\n\u2139 \uff62wds\uff63: Project is running at http://172.22.0.2/\n\u2139 \uff62wds\uff63: webpack output is served from\n\u2139 \uff62wds\uff63: Content not from webpack is served from /usr/src/app/public\n\u2139 \uff62wds\uff63: 404s will fallback to /\nStarting the development server...\n\nCompiled successfully!\n\nYou can now view TaskingManager-frontend in the browser.\n\n  Local:            http://localhost:3000\n  On Your Network:  http://172.22.0.2:3000\n\nNote that the development build is not optimized.\nTo create a production build, use yarn build.\n</code></pre> For OSM related <code>CLIENT_ID</code> and <code>SECRETS</code> check OSM AUTH section.</p>"},{"location":"developers/development-setup/#running-components-standalone","title":"Running Components Standalone","text":""},{"location":"developers/development-setup/#frontend","title":"Frontend","text":"<p>The client is the front-end user interface of the Tasking Manager. It is based on the React framework and you can find all files in the <code>frontend</code> directory.</p>"},{"location":"developers/development-setup/#dependencies","title":"Dependencies","text":"<p>The following dependencies must be available globally on your system: * Download and install NodeJS LTS v12+ and yarn * Go into the <code>frontend</code> directory and execute <code>yarn</code>.</p>"},{"location":"developers/development-setup/#available-scripts","title":"Available Scripts","text":"<p>In the project directory, you can run:</p>"},{"location":"developers/development-setup/#yarn-start","title":"<code>yarn start</code>","text":"<p>Runs the app in the development mode. Open http://localhost:3000 to view it in the browser.</p> <p>The page will reload if you make edits. You will also see any lint errors in the console.</p>"},{"location":"developers/development-setup/#yarn-test","title":"<code>yarn test</code>","text":"<p>Launches the test runner in the interactive watch mode. See the section about running tests for more information.</p>"},{"location":"developers/development-setup/#yarn-build","title":"<code>yarn build</code>","text":"<p>Builds the app for production to the <code>build</code> folder. It correctly bundles React in production mode and optimizes the build for the best performance.</p> <p>The build is minified and the filenames include the hashes. Your app is ready to be deployed!</p> <p>See the section about deployment for more information.</p>"},{"location":"developers/development-setup/#learn-more","title":"Learn More","text":"<p>You can learn more in the Create React App documentation.</p> <p>To learn React, check out the React documentation.</p>"},{"location":"developers/development-setup/#backend","title":"Backend","text":"<p>The backend is made up of a postgres database and an associated API that calls various end points to create tasks, manage task state, and produce analytics.</p>"},{"location":"developers/development-setup/#dependencies_1","title":"Dependencies","text":"<ul> <li>Python 3.7+</li> <li>Python 3.7 is what HOT uses in production. You can use Python 3.8 too.</li> <li>PostgreSQL with PostGIS</li> <li>pip</li> <li>libgeos-dev</li> </ul> <p>You can check the Dockerfile to have a reference of how to install it in a Debian/Ubuntu system.</p>"},{"location":"developers/development-setup/#configuration","title":"Configuration","text":"<p>There are two ways to configure Tasking Manager. You can set some environment variables on your shell or you can define the configuration in the <code>tasking-manager.env</code> file on the repository root directory. To use that last option, follow the below instructions:</p> <ul> <li>Copy the example configuration file to start your own configuration:   <code>cp example.env tasking-manager.env</code>.</li> <li>Adjust the <code>tasking-manager.env</code> configuration file to fit your configuration.</li> <li>Make sure that the following variables are set correctly in the   <code>tasking-manager.env</code> configuration file:</li> <li><code>TM_APP_BASE_URL</code>=web-server-endpoint</li> <li><code>POSTGRES_DB</code>=tasking-manager-database-name</li> <li><code>POSTGRES_USER</code>=database-user-name</li> <li><code>POSTGRES_PASSWORD</code>=database-user-password</li> <li><code>POSTGRES_ENDPOINT</code>=database-endpoint-can-be-localhost</li> <li><code>POSTGRES_PORT</code>=database-port</li> <li><code>TM_SECRET</code>=define-freely-any-number-and-letter-combination</li> <li><code>TM_CLIENT_ID</code>=oauth-client-id-from-openstreetmap</li> <li><code>TM_CLIENT_SECRET</code>=oauth-client-secret-key-from-openstreetmap</li> <li><code>TM_REDIRECT_URI</code>=oauth-client-redirect_uri</li> <li><code>TM_SCOPE</code>=oauth-client-scopes</li> <li><code>TM_LOG_DIR=logs</code></li> </ul> <p>In order to send email correctly, set these variables as well:   - <code>TM_SMTP_HOST</code>   - <code>TM_SMTP_PORT</code>   - <code>TM_SMTP_USER</code>   - <code>TM_SMTP_PASSWORD</code>   - <code>TM_SMTP_USE_TLS=0</code>   - <code>TM_SMTP_USE_SSL=1</code> (Either TLS or SSL can be set to 1 but not both)</p>"},{"location":"developers/development-setup/#install-dependencies","title":"Install Dependencies","text":"<ul> <li>Install project dependencies:</li> <li>First ensure the Python version in <code>pyproject.toml:requires-python</code> is installed on your system.</li> <li><code>pip install --upgrade uv</code></li> <li><code>uv sync</code></li> </ul>"},{"location":"developers/development-setup/#tests","title":"Tests","text":"<p>The project includes a suite of Unit and Integration tests that you should run after any changes.</p> <p><pre><code>python3 -m unittest discover tests/backend\n</code></pre> or <pre><code>uv run test\n</code></pre></p>"},{"location":"developers/development-setup/#export-translatable-strings-to-enjson-source-file","title":"Export translatable strings to en.json source file","text":"<pre><code>cd frontend &amp;&amp; yarn build-locales\n</code></pre>"},{"location":"developers/development-setup/#database","title":"Database","text":""},{"location":"developers/development-setup/#migrations-with-docker","title":"Migrations with docker","text":"<p>You need to delete all the versions in ./migrations/version. Then, import the new model into the file ./backend/init.py Finally, enter inside the migration container and run:</p> <pre><code>python manage.py db migrate\n</code></pre> <p>and</p> <pre><code>python manage.py db upgrade\n</code></pre>"},{"location":"developers/development-setup/#create-a-fresh-database","title":"Create a fresh database","text":"<p>We use Flask-Migrate to create the database from the migrations directory. Check the instructions on how to setup a PostGIS database with docker or on your local system. Then you can execute the following command to apply the migrations:</p> <p><pre><code>flask db upgrade\n</code></pre> or <pre><code>uv run upgrade\n</code></pre></p>"},{"location":"developers/development-setup/#set-permissions-to-create-projects","title":"Set permissions to create projects","text":"<p>To be able to create projects and have full permissions as an admin user inside TM, login to the TM with your OSM account to populate your user information in the database, then execute the following command on your terminal (with the OS user that is the owner of the database):</p> <p><code>psql -d &lt;your_database&gt; -c \"UPDATE users set role = 1 where username = '&lt;your_osm_username&gt;'\"</code></p>"},{"location":"developers/development-setup/#api","title":"API","text":"<p>If you plan to only work on the API you only have to build the backend architecture. Install the backend dependencies, and run the server:</p> <pre><code># Install dependencies\nuv sync\n\n# Run (Option 1)\nuv run start\n\n# Run (Option 2)\nuv run flask run --debug --reload\n</code></pre> <p>You can access the API documentation on http://localhost:5000/api-docs, it also allows you to execute requests on your local TM instance. The API docs is also available on our production and staging instances.</p>"},{"location":"developers/development-setup/#api-authentication","title":"API Authentication","text":"<p>In order to authenticate on the API, you need to have an Authorization Token.</p> <ol> <li>Run the command line <code>manage.py</code> via <code>flask</code> with the <code>gen_token</code>    option and <code>-u &lt;OSM_User_ID_number&gt;</code>. The command line can be run    in any shell session as long as you are in the tasking-manager    directory.</li> </ol> <pre><code>flask gen_token -u 99999999\n</code></pre> <p>This will generate a line that looks like this:</p> <p>Your base64 encoded session token: b'SWpFaS5EaEoxRlEubHRVC1DSTVJZ2hfalMc0xlalu3KRk5BUGk0'</p> <ol> <li>In the Swagger UI, where it says <p>Token sessionTokenHere==</p> </li> </ol> <p>replace <code>sessionTokenHere==</code> with the string of characters between the apostrophes (' ') above so you end up with something that looks like this in that field:</p> <p>Token SWpFaS5EaEoxRlEubHRVC1DSTVJZ2hfalMc0xlalu3KRk5BUGk0</p> <p>Your user must have logged in to the local testing instance once of course and have the needed permissions for the API call.</p> <p>You can get your OSM user id number either by finding it in your local testing/dev database <code>select * from users</code> or from OSM by viewing the edit history of your user, selecting a changeset from the list, and then at the bottom link <code>Changeset XML</code> and it will be in the <code>uid</code> field of the XML returned.</p>"},{"location":"developers/development-setup/#api-authentication-on-remote-instance","title":"API Authentication on remote instance","text":"<p>To get your token on the production or staging Tasking Manager instances, sign in in the browser and then either:</p> <ul> <li>go to the user profile page, enable Expert mode in the settings,   and copy the token from the API Key section.</li> <li>inspect a network request and search for the <code>Authorization</code> field   in the request headers section.</li> </ul>"},{"location":"developers/development-setup/#additional-info","title":"Additional Info","text":""},{"location":"developers/development-setup/#creating-a-local-postgis-database-without-docker","title":"Creating a local PostGIS database without Docker","text":""},{"location":"developers/development-setup/#creating-the-postgis-database","title":"Creating the PostGIS database","text":"<p>It may be the case you would like to set up the database without using Docker for one reason or another. This provides you with a set of commands to create the database and export the database address to allow you to dive into backend development.</p>"},{"location":"developers/development-setup/#dependencies_2","title":"Dependencies","text":"<p>First, ensure that Postgresql and PostGIS are installed and running on your computer.</p>"},{"location":"developers/development-setup/#create-the-database-user-and-database","title":"Create the database user and database","text":"<p>Assuming you have sudo access and the unix Postgresql owner is <code>postgres</code>:</p> <pre><code>$ sudo -u postgres psql\n$ CREATE USER \"hottm\" PASSWORD 'hottm';\n$ CREATE DATABASE \"tasking-manager\" OWNER \"hottm\";\n$ \\c \"tasking-manager\";\n$ CREATE EXTENSION postgis;\n</code></pre> <p>Finally, add the environmental variable to access the database:</p> <p><code>export TM_DB=postgresql://hottm:hottm@localhost/tasking-manager</code></p> <p>It is possible to install and run the Tasking Manager using Docker and Docker Compose.</p> <p>Clone the Tasking Manager repository and use <code>docker compose --env-file tasking-manager.env up</code> to get a working version of the API running.</p>"},{"location":"developers/development-setup/#sysadmins-guide","title":"Sysadmins guide","text":"<ul> <li>System architecture</li> <li>Managing CI/CD with CircleCI</li> <li>Deployment Guide</li> </ul>"},{"location":"developers/error_code/","title":"Tasking Manager API Error Codes","text":"<p>In this document you can find detailed descriptions of the error codes you might encounter when using the different endpoints of the Tasking Manager API.</p>"},{"location":"developers/error_code/#error-messages-and-codes","title":"Error Messages and Codes","text":"<p>When the TM API returns error messages, it does so in JSON format. For example, an error might look like this: <pre><code>{\"error\":\"Task in invalid state for mapping\",\"SubCode\": \"InvalidTaskState\"}\n</code></pre></p>"},{"location":"developers/error_code/#error-codes","title":"Error Codes","text":"<p>In addition to descriptive error text, error messages also contains SubCodes. While the text for an error message may change, the SubCode will stay the same.</p> Code Subcode Text 401 InvalidToken Token is expired or invalid 403 AlreadyFeatured Project is already featured 403 CannotValidateMappedTask Tasks cannot be validated by the same user who marked task as mapped or badimagery 500 InternalServerError Internal Server Error 400 InvalidData Error validating request 400 InvalidDateRange Date range can not be bigger than 1 year 400 InvalidMultipolygon Area of Interest: Invalid MultiPolygon 403 InvalidNewOwner New owner must be project's org manager or TM admin 400 InvalidStartDate Start date must be earlier than end date 403 InvalidTaskState Task in invalid state for mapping 403 InvalidUnlockState Can only set status to MAPPED, BADIMAGERY, READY after mapping 403 LockBeforeUnlocking Status must be LOCKED_FOR_MAPPING to unlock 403 LockToSplit Status must be LOCKED_FOR_MAPPING to split 400 MissingDate Missing start date parameter 400 MustBeMultiPloygon Geometry must be a MultiPolygon 400 MustHaveFeatures Geojson does not contain any features 403 NotFeatured Project is not featured 404 NotFound Not Found 403 NotLockedForValidation Task is not LOCKED_FOR_VALIDATION 403 NotReadyForValidation Task is not MAPPED, BADIMAGERY or INVALIDATED 403 OnlyAdminAccess This endpoint action is restricted to ADMIN users 403 ProjectNotPublished Mapping not allowed because: Project not published 403 SmallToSplit Task is too small to be split 403 SplitGeoJsonError New split task does not intersect original task 403 SplitOtherUserTask Attempting to split a task owned by another user 403 TaskNotOwned Attempting to unlock a task owned by another user 403 UndoPermissionError Undo not allowed for this user 403 UserAlreadyHasTaskLocked Mapping not allowed because: User already has task locked 409 UserLicenseError User not accepted license terms 403 UserNotAllowed Mapping not allowed because: User not on allowed list 403 UserNotPermitted User action not permitted 403 UserPermissionError User is not a manager of the project 403 PrivateProject User not permitted: Private Project 403 ProjectNotFetched Unable to fetch project 403 NotPermittedToCreate User is not permitted to create project 400 MustBeFeatureCollection GeoJson must be FeatureCollection 400 InvalidFeatureCollection Invalid GeoJson: Invalid feature collection 400 MustBeFeature Invalid GeoJson should be a feature 400 InvalidMultiPolygon Invalid GeoJson: Invalid feature collection 400 PropertyNotFound Expected property not found 403 InfoForLocaleRequired Project Info for Default Locale not provided 403 MissingRequiredAttribute Missing required attribute 403 RequireLicenseId LicenseId not found 403 HasMappedTasks Project has mapped tasks, cannot be deleted 403 DeletePermissionError User does not have permissions to delete project 403 BBoxTooBigError Requested bounding box is too large 403 UserAlreadyInList User is already a member of this team or has already requested to join 403 UserJoinDisallowed User not allowed to join team 403 ApproveJoinError You don't have permissions to approve this join team request 403 RemoveUserError You don't have permissions to remove from this team. 400 EmptyMessage Empty message not allowed 401 UserNotTeamManager User is not a admin or a manager for the team 403 CreateTeamNotPermitted User not permitted to create team for the Organisation 401 UnableToAuth Unable to authenticate 400 UnknownUserRole Unknown role accepted values are BEGINNER, INTERMEDIATE, ADVANCED 403 UnknownAddRole Unknown role accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR 403 NeedAdminRole You must be an Admin to assign Admin role 400 DateRangeGreaterThan3 Date range can not be bigger than 3 years 400 MissingDate Missing start date parameter 403 AuthError Unable to authenticate 400 UnsupportedFile Mimetype is not allowed. The supported formats are: png, jpeg, webp and gif. 400 MissingFilename Missing filename parameter 500 UndefinedImageService Image upload service not defined 409 NameExists Name already exists 409 NullName Name cannot be null 403 ReadOnly User is on read only mode 403 AccessOtherUserMessage User attempting to access another users message 403 CampaignAlreadyAssigned Campaign is already assigned to organization 403 UserNotOrgAdmin User is not an admin for the org 403 OrgHasProjects Organization has some projects 403 MustHaveAdmin Must have at least one admin 403 LoginToFilterManager Filter by manager_user_id is not allowed to unauthenticated requests 400 SelfIntersectingAOI Invalid geometry. Polygon is self-intersecting 400 TransferPermissionError Project ownership transfer is only allowed to TM Admin, Organization admin and project author"},{"location":"developers/review-pr/","title":"Review of Pull Requests","text":"<p>All team members are encouraged to regularly review Pull Requests (PR). Within the team we are open to assign people we feel are the best for a certain topic to be checked. A best practice is to have two reviewers, one that looks more on the code and one that has an overview of behaviour and functionality. Note that all PRs should be made from a fork of the primary branch.</p> <p>For many small PRs, they can be reviewed by clicking on the PR number to the right side of the patch. For larger PRs you need to checkout the pull request. You can see the branch name on the page for the PR. Since you should be developing in a fork, you need to clone the primary repository to see the PR branch. Once your primary sources are up to date, you can check out the PR branch.</p> <pre><code>git checkout BRANCHNAME\n</code></pre> <p>To see the differences you can use git diff.</p> <pre><code>git diff BRANCHNAME..develop\n</code></pre> <p>1 . Check whether Continuous Integration runs without errors</p> <p>Have a look on the CI results. In case they fail, add a comment to the PR and ask the person to check on the error. If the CI tests are good, you are good to go with the next step.</p> <p>2 . Review code</p> <p>Check on the code a using this criterias:</p> <ul> <li>Is the code of a good quality?</li> <li>Are there any typos included?</li> <li>Is the code commented?</li> <li>Are there unit tests related to new functionality?</li> </ul> <p>If there are any issues, add a comment to the PR page on github. A PR should not be approved until all issues with the PR are resolved.</p> <p>3 . Merge a PR</p> <ul> <li>On the github page for the PR, click the Merge pull request     button.</li> <li> <p>Delete the PR branch</p> <p>git push origin --delete BRANCHNAME</p> </li> </ul>"},{"location":"developers/submit-pr/","title":"Submitting a PR","text":"<p>Before submitting a Pull Request(PR) you should test your changes. If your changes are nopt covered by any existing test cases, it is strongly recommended to add a test case. If you are submitting a PR for a bug, please add the github issue for the bug to the branch name if possible.</p> <p>It's better to have multiple PRs with a scope limited to the specific issue being worked on, than one large one covering multiple issues. Also creating a PR in draft mode and continuing to commit to it works fine, but does get confusing for the reviwers. A PR in draft mode for more than a short time runs the risk of being ignored.</p>"},{"location":"developers/submit-pr/#tests-and-coverage","title":"Tests and coverage","text":"<p>The backend has unit tests which can be run manually. These are the same tests the CI support runs. To run all the tests, do this:</p> <pre><code>python3 -m unittest discover ./tests\n</code></pre> <p>To run a specific test case, you can do it like this:</p> <pre><code>python -m unittest tests/backend/integration/services/test_license_service.py\n</code></pre> <p>Whenever you add a new endpoint in the backend, you should add a test case for it.</p>"},{"location":"developers/submit-pr/#check-changes","title":"Check changes","text":"<p>This is a small list of possible scenarios that you should test. Ideally, you would check all of them regardless if the answer to the question is 'no' to make sure there are no collateral issues from a PR. This should be done in your local docker container, and not on a production server.</p> <ul> <li>Are changes made to the frontend? Walk through them logged in and   logged out (if possible).</li> <li>Are changes made to the API? Check you can poll it at   <code>http://localhost:5000/api-docs</code> if you have Tasking Manager running   in a docker container.</li> <li>Do changes touch messaging? Try logging in with two separate   accounts in two browsers (e.g. one open with private browsing) and   interacting between users.</li> <li>Do changes effect selecting a task to map ? Check out a task for   mapping and unlock it. Check out another task for mapping and mark   it done. Check out a task and unlock it. Check out a task for   validation and mark it validated. Check out a task for validation   and mark it invalidated.</li> <li>Do changes touch on task commenting? Comment on a task without   checking it out. Comment on a task while checked out for   mapping. Comment on a task while checked out for validating.</li> </ul>"},{"location":"developers/tmschema/","title":"Tasking Manager Database Schema","text":"<p>The TM database schema has evolved over the years. It is currently implemented using sqlalchmey for the backend.</p>"},{"location":"developers/tmschema/#misc-tables","title":"Misc Tables","text":"<ul> <li>alembic_version - The version of alembic used</li> <li>banner - A list of banners, which doesn't appear to be used anywhere</li> <li>priority_areas - A list of geometries for priority areas</li> <li>release_version - The version of the TM release</li> <li>spatial_ref_sys - Postgis support</li> </ul>"},{"location":"developers/tmschema/#prepopulated-tables","title":"Prepopulated Tables","text":"<p>These tables contain data used by the frontend mostly. These could have been an Enum, but a tables can be updated by the front end, whereas an Enum can't. It does seem entirely possible these could be extended by a project manager, for example, adding a new license.</p> <ul> <li>interests - General mapper interests</li> <li>licenses - Data licenses</li> <li>mapping_issue_categories - Issues with the map data</li> <li>application_keys - Application keys for remote data. This appears to   not be used.</li> </ul>"},{"location":"developers/tmschema/#campaign-tables","title":"Campaign Tables","text":"<p>The campaigns table is for mapping campaigns. A single campaign can involve multiple organizations and TM projects.</p> <ul> <li>campaigns - Primary table</li> <li>campaign_organisations - Utility table to relate organizations with   a campaign</li> <li>campaign_projects - Utility table to relate projects with a campaign</li> </ul>"},{"location":"developers/tmschema/#organization-tables","title":"Organization Tables","text":"<p>This is for an Organization profile.</p> <ul> <li>organisations - Primary table</li> <li>organisation_managers - Utility table to relate managers with an organization</li> </ul>"},{"location":"developers/tmschema/#project-tables","title":"Project Tables","text":"<p>A project is the area to be mapped for the campaign. Each project contains members and teams, which are stored in other tables.</p> <ul> <li>projects - Primary table</li> <li>project_allowed_users - Utility table to relate users to projects</li> <li>project_custom_editors - Utility table to store custom mapping   editors, currently only used by RapidID</li> <li>project_favorites - Utility table to store favorite projects for a user</li> <li>project_info - Details on the project, like the description &amp; instructions</li> <li>project_interests - Utility table to relate projects to interest categories</li> <li>project_priority_areas - Utility table to relate priority areas to projects</li> <li>project_teams - Utility table to relate team roles to projects</li> <li>project_chat - Support commenting for a project</li> </ul>"},{"location":"developers/tmschema/#messages-table","title":"Messages Table","text":"<p>Support messaging between users.</p> <ul> <li>messages - Primary table</li> </ul>"},{"location":"developers/tmschema/#task-tables","title":"Task Tables","text":"<p>A task is the area for a mapper to map. Task management is obviously a key function of the Tasking Manager.</p> <ul> <li>tasks - Primary table</li> <li>task_annotations - Utility table for something, it appears to be   unused anywhere</li> <li>task_history - Table for task history</li> <li>task_invalidation_history - Table for task invalidation history</li> <li>task_mapping_issues - Table for issues with a task</li> </ul>"},{"location":"developers/tmschema/#task-history-table","title":"Task History Table","text":"<p>This table is used to track the state changes for a task, not including a task being invalidated. It contains a description of the status change, when it changed, and the user ID when the task is locked for mapping. A single task for a project may go through several state changes during it's lifespan.</p>"},{"location":"developers/tmschema/#task-invalidation-history-table","title":"Task Invalidation History Table","text":"<p>This table is used to track tasks that are invalidated. Unlike simple state changes in the task history table, this tracks which validator invalidated the task, when it was invalidated, and when the issue is resolved.</p>"},{"location":"developers/tmschema/#task-mapping-issues","title":"Task Mapping Issues","text":"<p>TBD</p>"},{"location":"developers/tmschema/#team-tables","title":"Team Tables","text":"<p>This is for OSM Team support.</p> <ul> <li>teams - Primary table</li> <li>team_members - Utility table for team member profiles</li> </ul>"},{"location":"developers/tmschema/#user-tables","title":"User Tables","text":"<ul> <li>users - Primary table</li> <li>user_interests - Utility table to relate interests for a user</li> <li>user_licenses - Utility table to relate the data license to user</li> <li>users_with_email - Utility table of user email addresses, which   appears to be unused</li> </ul>"},{"location":"developers/tmschema/#notification-table","title":"Notification Table","text":"<p>This is a simple system for notifications.</p> <ul> <li>notifications - Primary table</li> </ul>"},{"location":"developers/translations/","title":"Translations","text":""},{"location":"developers/translations/#translations","title":"Translations","text":"<p>The Tasking Manager is localised using our Transifex repository. This is super easy. If you are interested, make yourself an account and apply to join the <code>hotosm-translator</code> team. Everybody is welcome to support translations through the Transifex website.</p>"},{"location":"developers/translations/#developers","title":"Developers","text":"<p>For developers, Tasking Manager uses Transifex to manage UI translations, and the integration is handled using the Transifex CLI.</p> <p>Translations are stored in <code>.json</code> format as key/value pairs under <code>frontend/src/locales/</code>.These files follow the React-based i18n format and are synchronized with Transifex using the CLI.</p>"},{"location":"developers/translations/#setting-up-transifex-cli","title":"Setting up Transifex CLI","text":"<p>To set up the Transifex client, you'll need a Transifex account and API key. In the project's top level directory, initialize Transifex service: <code>tx init</code>. The init process will ask for service URL (leave the default suggestion by hitting enter) and your Transifex username/password.</p> <p>The .tx folder contains the Transifex config file. This is where you can find the mappings to local translation files.</p>"},{"location":"developers/translations/#running-the-transifex-cli","title":"Running the Transifex CLI","text":"<p>You can run the CLI via Docker (recommended) or install it natively. Use one of the following methods:</p>"},{"location":"developers/translations/#option-1-docker-based-cli-recommended","title":"Option 1: Docker-based CLI (Recommended)","text":"<p>Use the provided helper scripts to run the CLI inside Docker:</p> <ul> <li>macOS/Linux:</li> </ul> <pre><code>  ./scripts/transifex/tx-docker.sh pull  # Downloads the latest translations\n  ./scripts/transifex/tx-docker.sh push -s  # Pushes updated source strings (English in our case)\n</code></pre> <ul> <li>Windows (PowerShell):</li> </ul> <pre><code>  ./scripts/transifex/tx-docker.ps1 pull\n  ./scripts/transifex/tx-docker.ps1 push -s\n</code></pre> <p>These scripts will:</p> <ul> <li> <p>Run Transifex CLI inside a Docker container</p> </li> <li> <p>Mount your project directory</p> </li> <li> <p>Handle system certificates for secure API communication</p> </li> </ul> <p>If you run into certificate-related errors, update the paths in the script or try the manual install method.</p>"},{"location":"developers/translations/#option-2-manual-native-cli","title":"Option 2: Manual (Native CLI)","text":"<ul> <li>Install CLI (macOS/Linux):</li> </ul> <pre><code>  curl -sSL https://raw.githubusercontent.com/transifex/cli/master/install.sh | bash\n</code></pre> <ul> <li>Install CLI (Windows):   Download from Transifex CLI Releases   Then run:   <pre><code>  tx pull\n  tx push\n</code></pre></li> </ul>"},{"location":"developers/translations/#update-translation-strings","title":"Update translation strings","text":"<ul> <li><code>yarn build-locales</code> - Execute that command in the <code>frontend</code>   folder to get the new translatable strings from all the   <code>messages.js</code> files in the frontend code. The changes in the strings   will be pushed to <code>frontend/src/locales/en.json</code> file. The ideal is   to execute that command before every pull request that change   something in the translatable strings.</li> <li>After the pull request is merged to the <code>develop</code> branch, the   command <code>tx push -s</code> needs to be executed in order to push the   changes to Transifex. The translators receive a notification every   time we push changes to Transifex.</li> </ul>"},{"location":"developers/translations/#update-with-latest-translations","title":"Update with latest translations","text":"<ul> <li>Before a release, new translations need to be pulled in: <code>tx pull -af --mode translator</code> - Gets all translations from Transifex and   puts them into <code>frontend/src/locales/</code>.</li> <li>The Transifex   dashboard   can be used to check the status of the translations. If a language   is not enabled in the <code>.tx/config</code> file, the translation updates   will be downloaded to the <code>.tx/tasking-manager.version-4/</code> folder.</li> </ul>"},{"location":"developers/translations/#adding-a-new-language","title":"Adding a new language","text":"<p>The steps required to add a new language support to Tasking Manager are the following:</p> <ul> <li>Add the language support using the Transifex   dashboard;</li> <li>Edit <code>.tx/config</code> and add a line like: <code>trans.ml = frontend/src/locales/ml.json</code></li> <li>Add the new language and language code to:</li> <li>The <code>SUPPORTED_LANGUAGES</code> dictionary in the config file <code>backend/config.py</code>;</li> <li>The <code>supportedLocales</code> array on <code>frontend/src/utils/internationalization.js</code>;</li> <li>The polyfills in <code>frontend/src/utils/polyfill.js</code>;</li> <li>If the new language is not yet supported by     iso-countries-languages,     we need to update it and publish a new version.</li> </ul>"},{"location":"developers/translations/#pushing-translations","title":"Pushing translations","text":"<p>You can also translate locally and push the Use Transifex's <code>tx push -s</code> (if you are using native CLI method) to push local changes to Transifex.</p> <ul> <li>Argument <code>-s</code> pushes source files (English in our case)</li> <li>Argument <code>-t</code> pushes all translation files</li> </ul>"},{"location":"developers/translations/#helpful-links","title":"Helpful Links","text":"<p>Transifex CLI Docs</p> <p>Tasking Manager Transifex Dashboard</p> <p>Transifex CLI GitHub</p> <p>iso-countries-languages</p>"},{"location":"developers/versions-and-releases/","title":"Versions and Releases","text":"<p>We recently switched to a trunk-based development model for managing development.</p> <ul> <li><code>master</code> branch has recently been depreciated in favor of using <code>develop</code> as the trunk branch.</li> <li><code>develop</code> branch contains the consistent and mostly stable development version of the Tasking Manager. It is the branch where all reviewed features are combined and tested together. This branch is automatically going to be deployed on tasks-stage.hotosm.org.</li> <li><code>feature/</code> branches are applied to <code>develop</code> after one teammate has reviewed the pull request as approved.</li> <li><code>hotfix/</code> branches are applied to <code>develop</code> after two teammates have reviewed the pull request as approved.</li> <li><code>bugfix/</code> branches are applied to <code>develop</code> after two teammates have reviewed the pull request as approved. This convention applies to non-critical fixes that can be deployed in the next scheduled release.</li> <li><code>deployment/</code> branches contain the codebase for deployed code. See Deployment for more info.</li> </ul> <p>Outside collaborations from the wider community most likely will not always apply the trunk branching model and the conventions for naming the branches. This doesn\u2019t have to be a requirement in this case.</p>"},{"location":"developers/versions-and-releases/#major-releases","title":"Major releases","text":"<p>This procedure is undergoing changes! Keep an eye on this space for updated info soon.</p> <p>We consider major releases to be counting the second digit up (e.g. 3.1.0 or 3.2.0). Major releases shall happen around once every six weeks and follow an established procedure:</p> <ul> <li>After four weeks coordinate a feature freeze. Which can happen immediately, or might give some one or two weeks for finishing up the features that the team wants to have in the next release.</li> <li>Freeze <code>develop</code> after agreed improvements have been implemented. The feature freeze shall last for one week, which means no feature branch pull requests can be merged for the time being.</li> <li>Create a Pull Request to <code>master</code> from the <code>develop</code> branch. Include the release notes into it, so it can be reviewed by the team.</li> <li>Ping <code>@hotosm/software-testers</code> group to test tasks-stage.hotosm.org extensively.</li> <li>Get approval of two code reviews of core contributors to the Tasking Manager.</li> <li>After one week and good feedback merge into <code>master</code>.</li> <li>Rebase <code>develop</code> on <code>master</code>.</li> <li>Create a tag with a release from the <code>master</code> branch.</li> </ul>"},{"location":"developers/versions-and-releases/#minor-releases","title":"Minor releases","text":"<p>A minor release refers to the third digit (like 3.2.1 or 3.2.2). It is meant to be an emergency release to fix bugs that are crucial. Only hotfix branches can be applied.</p> <ul> <li>Create a Pull Request to <code>master</code> from a <code>hotfix</code> branch. Include brief release notes into it, so it can be reviewed by the team.</li> <li>Get approval of two code reviews of core contributors to the Tasking Manager.</li> <li>Merge into <code>master</code> and <code>develop</code>.</li> <li>Rebase <code>develop</code> on <code>master</code>.</li> <li>Create a tag with a release from the <code>master</code> branch.</li> </ul>"},{"location":"sysadmins/architecture/","title":"Architecture","text":"<p>Reference for the Cloudformation script:</p> <p>TaskingManagerASG AutoScalingGroup configures the properties of the Autoscaling Group. There is a condition that determines three levels of autoscaling: development (1 instance only), demo (max 3 instances), and production (min 2 max 6 instances).</p> <p>TaskingManagerScaleUp Scaling Policy determines the threshold at which the ASG scales up. We use the CloudWatch metric ALBRequestCountPerTarget to keep the number of requests per instance below a certain level.</p> <p>TaskingManagerLaunchConfiguration has a number of metadata files and commands which are loaded and run during instantiation of a new server into the ASG. The Tasking Manager environment variables are set in this resource.</p> <p>TaskingManagerEC2Role IAM role enables the backend servers to communicate with CodeDeploy, CloudWatch monitoring, Cloudformation, and the RDS Database.</p> <p>TaskingManagerDatabaseDumpAccessRole is an EC2 IAM Role that is only used if a database dump file is given in the configuration, enabling access to the s3 bucket containing that file.</p> <p>TaskingManagerEC2InstanceProfile is a required resource for giving a server programmatic access to AWS services.</p> <p>TaskingManagerLoadBalancer configures the security groups and subnets for the Application Load Balancer AWS resource.</p> <p>TaskingManagerLoadBalancerRoute53 record set for the load balancer.</p> <p>TaskingManagerTargetGroup configures health checks for each target in the Load Balancer.</p> <p>TaskingManagerLoadBalancerHTTPSListener assigns the SSL Certificate, protocol, and port to the HTTPS Listener.</p> <p>TaskingManagerLoadBalancerHTTPListener redirects requests to HTTPS.</p> <p>TaskingManagerRDS configures all the properties of the database RDS.</p> <p>TaskingManagerReactBucket is the bucket where the frontend code is stored and served.</p> <p>TaskingManagerReactBucketPolicy gives read access to the objects stored in the bucket.</p> <p>TaskingManagerReactCloudfront configures the CloudFront Distribution for the static frontend stored on S3.</p> <p>TaskingManagerRoute53 is the Route53 Record for the frontend, i.e. <code>tasks.hotosm.org</code></p>"},{"location":"sysadmins/architecture/#parameters","title":"Parameters","text":"<p>GitSha is the commit hash from the HOTOSM Tasking Manager repository to be deployed.</p> <p>NetworkEnvironment has only two options- <code>staging</code> and <code>production</code>, and determines the security groups used for the EC2s and Load Balancer.</p> <p>AutoscalingPolicy can be <code>development</code>, <code>demo</code>, or <code>production</code> and determines the min/max number of instances.</p> <p>DBSnapshot is an optional parameter. Specify the RDS Snapshot ID to create the database from a snapshot.</p> <p>DatabaseDump is an optional parameter. Specify the s3 bucket object path to create the database from a plaintext dump file.</p> <p>NewRelicLicense</p> <p>PostgresDB is the name of the database</p> <p>PostgresPassword is the database password</p> <p>PostgresUser is the database user</p> <p>DatabaseEngineVersion AWS PostgreSQL Engine version</p> <p>DatabaseInstanceType is the AWS database instance tier (eg db.t3.large)</p> <p>DatabaseDiskSize is the size (in GB) of the RDS instance. Recommended at least 100GB for better IOPS</p> <p>DatabaseParameterGroupName use the default parameter group if you don't know what this is.</p> <p>DatabaseSnapshotRetentionPeriod Retention period for automatic (scheduled) snapshots in days.</p> <p>ELBSubnets is a comma-separated string of subnets for your AWS region. Make sure the subnets support the EC2 instance type.</p> <p>SSLCertificateIdentifier the ID for the AWS SSL Certificate</p> <p>TaskingManagerLogDirectory the path on the instance where the logs are stored on the server, e.g. <code>/var/log/tasking-manager/</code></p> <p>TaskingManagerClientId is a key generated by creating and OSM OAuth Client Application.</p> <p>TaskingManagerClientSecret is a secret key generated by creating and OSM OAuth Client Application.</p> <p>TaskingManagerRedirectUri allowed URIs to which the user can be redirected after authorizing the application.</p> <p>TaskingManagerScope are scope(s) which may be requested by a client.</p> <p>TaskingManagerSecret a random string for the frontend and backend to communicate.</p> <p>TaskingManagerAppBaseUrl the full base url of the site, e.g. <code>https://tasks.hotosm.org/</code>.</p> <p>TaskingManagerEmailFromAddress an email address from which messages will be sent to users.</p> <p>TaskingManagerEmailContactAddress a contact address which will show up in places around the site</p> <p>TaskingManagerLogLevel can be either <code>DEBUG</code> or <code>INFO</code></p> <p>TaskingManagerImageUploadAPIURL</p> <p>TaskingManagerImageUploadAPIKey</p> <p>TaskingManagerSMTPHost the host url for the AWS Simple Email Service</p> <p>TaskingManagerSMTPPassword the authentication password for AWS SES</p> <p>TaskingManagerSMTPUser the authentication user for AWS SES</p> <p>TaskingManagerSMTPPort the port for AWS SES</p> <p>TaskingManagerDefaultChangesetComment the project default comment hashtag</p> <p>TaskingManagerURL the url without the protocol- e.g. <code>tasks.hotosm.org</code></p> <p>TaskingManagerOrgName Name of the app/org hosting the app</p> <p>TaskingManagerOrgCode 3 letter code for the org name</p> <p>SentryBackendDSN If using sentry, input DSN url here</p> <p>TaskingManagerLogo URL for a logo</p>"},{"location":"sysadmins/ci-cd/","title":"CI/CD","text":"<p>We use CircleCI to manage Continuous Integration and Continuous Deployment.</p> Environment Branch Production deployment/hot-tasking-manager Production-frontend deployment/hot-tasking-manager-frontend Staging develop TeachOSM deployment/teachosm-tasking-manager Indonesia deployment/id-tasking-manager <p>Each environment has its own set of environment variables which are stored as secrets in the CircleCI Organization Settings under Contexts. At the moment, these variables are for the frontend builds only. See the deployment docs for updating backend variables.</p> <ul> <li>OPSGENIE_API</li> <li>TM_APP_API_URL</li> <li>TM_APP_API_VERSION</li> <li>TM_APP_BASE_URL</li> <li>TM_CONSUMER_KEY</li> <li>TM_CONSUMER_SECRET</li> <li>TM_ENABLE_SERVICEWORKER</li> <li>TM_MAPBOX_TOKEN</li> <li>TM_MATOMO_ENDPOINT</li> <li>TM_MATOMO_ID</li> <li>TM_ORG_CODE</li> <li>TM_ORG_NAME</li> <li>TM_ORG_PRIVACY_POLICY_URL</li> <li>TM_ORG_URL</li> <li>TM_SERVICE_DESK</li> </ul>"},{"location":"sysadmins/ci-cd/#automated-tests","title":"Automated Tests","text":"<p>For each Pull Request and branch, the CI runs a set of frontend and backend tests. We have a context in place called \"tasking-manager-testing\" for setting up the database with the following environment variables:</p> <ul> <li>POSTGRES_DB</li> <li>POSTGRES_ENDPOINT</li> <li>POSTGRES_USER</li> <li>TM_ORG_CODE</li> <li>TM_ORG_NAME</li> </ul> <p>Note that the POSTGRES_DB variable should be for the default database (in our case <code>tm</code>) the testing script will create a database called <code>test_$POSTGRES_DB</code> during setup. The <code>TM_ORG_*</code> vars are required for certain tests to pass; most notably )<code>test_variable_replacing</code> in the <code>TestTemplateService</code>.</p>"},{"location":"sysadmins/ci-cd/#refreshing-circleci-cache","title":"Refreshing CircleCI Cache","text":"<p>The CI stores the frontend node_modules folder to save time on builds. Sometimes it will be necessary to force all builds to use a fresh installation, so the cache will have to be refreshed manually.</p> <p>In the Tasking Manager CircleCI settings there is an environment variable \"CACHEVERSION\". Set this value to <code>v{n}</code> where {n} is an integer increased by 1 each time you wish to clear the cache.</p>"},{"location":"sysadmins/customize/","title":"Customize your Tasking Manager","text":"<p>This guide intends to walk you through the process of customizing the Tasking Manager for your own use.</p>"},{"location":"sysadmins/customize/#css","title":"CSS","text":"<p>The frontend site CSS is built from the files at https://github.com/hotosm/tasking-manager/tree/develop/frontend/src/assets/styles.</p>"},{"location":"sysadmins/customize/#images","title":"Images","text":"<p>Logos are stored at https://github.com/hotosm/tasking-manager/tree/develop/frontend/src/assets/img for the site frontend.</p>"},{"location":"sysadmins/customize/#configuration-site-url-hashtags-contact","title":"Configuration (site URL, hashtags, contact)","text":"<p>Most of the site configuration, such as the URL of the site, default changeset hashtags, and contact email addresses, are found in https://github.com/hotosm/tasking-manager/blob/develop/backend/config.py.</p>"},{"location":"sysadmins/deployment/","title":"Deployment Process","text":""},{"location":"sysadmins/deployment/#deploying-to-aws","title":"Deploying to AWS","text":"<p>Backend</p> <p>Prerequisites:   - AWS Simple Email Service Domain and SMTP Credentials   - AWS VPC and Security groups:     - VPC: <code>hotosm-network-production-default-vpc-&lt;region&gt;</code>     - Security Groups:       - <code>hotosm-network-production-&lt;NetworkEnvironment&gt;-ec2s-security-group</code>       - <code>hotosm-network-production-&lt;NetworkEnvironment&gt;-elbs-security-group</code>   - cfn-config   - S3 bucket for storing cfn-config json files</p> <pre><code>cfn-config create &lt;stack-name&gt; scripts/aws/cloudformation/tasking-manager.template.js -t &lt;cfn-template-bucket&gt; -c &lt;cfn-config-bucket&gt;\n</code></pre> <p>Frontend</p> <p>This step is optional if you choose to setup CI/CD</p> <p>First the environment variables in <code>./frontend/.env</code>, then run the following code. <code>&lt;TaskingManagerReactBucket&gt;</code> is the name of the bucket in the cloudformation stack created above.</p> <pre><code>cd ./frontend/\nyarn\nyarn build\naws s3 sync build/ &lt;TaskingManagerReactBucket&gt; --delete\n</code></pre>"},{"location":"sysadmins/deployment/#performing-updates","title":"Performing Updates","text":"<p>When deploying updates to the infrastructure or code, follow the steps below.</p>"},{"location":"sysadmins/deployment/#backup-database","title":"Backup Database","text":"<p>Before updating it's always recommended to backup the database. You can make a snapshot in AWS RDS console, or run the database dump directly. You will need sufficient access to a server on the same VPC as the RDS instance in order to connect to it directly.</p> <pre><code>PGPASSWORD=&lt;PostgresPassword&gt; pg_dump -Fc \\\n  -h &lt;RDS_URI&gt; \\\n  -U &lt;PostgresUser&gt; \\\n  -f backup.dump \\\n  &lt;PostgresDB&gt;\n</code></pre>"},{"location":"sysadmins/deployment/#update-backend-infrastructure","title":"Update backend infrastructure","text":"<p>If the deployment contains any changes to the cloudformation template, including new or changes to environment variables, then we must update the infrastructure prior to deployment. These changes are deliberately set outside the CI/CD process to prevent accidental deletion of data. For the HOT Tasking Manager, only staff with sufficient AWS privileges have the ability to perform these functions.</p> <ol> <li>Pull the latest changes locally</li> <li>Run the <code>cfn-config update</code> command, keeping in mind to update any new parameters that were added.</li> </ol> <pre><code>cfn-config update tm4-production \\\n scripts/aws/cloudformation/tasking-manager.template.js \\\n -t hot-cfn-config -c hot-cfn-config\n</code></pre>"},{"location":"sysadmins/deployment/#deploy-code-to-production","title":"Deploy Code to Production","text":"<p>Make sure you have set up CI/CD properly first. We use a simple git branch model to manage different deployments/environments, so adjust the branch names as needed.</p> <pre><code>git checkout develop\ngit fetch\ngit pull origin develop\ngit checkout deployment/hot-tasking-manager\ngit pull origin deployment/hot-tasking-manager\ngit rebase develop\ngit push origin deployment/hot-tasking-manager\n</code></pre> <p>In the event that the changes to be deployed are frontend only, you may instead rebase and push the <code>deployment/hot-tasking-manager-frontend</code> branch. This will be significantly faster and less disruptive than a standard deployment, which has to replace compute resources.</p>"},{"location":"sysadmins/migration/","title":"Migrate Tasking Manager between major versions","text":"<p>The migrations are always a source for problems and they are made for us to run and work. But they are not production ready. Therefore, please do always backups and run the migration first in a testing environment, make sure everything works as expected before you move on!</p>"},{"location":"sysadmins/migration/#migration-from-version-3-to-version-4","title":"Migration from version 3 to version 4","text":"<p>First and optionally, you might want to run the following SQL script against your database for a cleanup of eventual duplications of priority areas:</p> <p>$ <code>psql -d myDataBase -a -f scripts/database/duplicate-priority-area-cleanup.sql</code></p> <p>Now, migrating from version 3 to version 4 can be done through the build in alembic migrations by simply running:</p> <p>$ <code>flask db upgrade</code> or <code>uv run upgrade</code></p> <p>Depending on the size of your database this might take a good while.</p>"},{"location":"sysadmins/migration/#migration-from-version-2-to-version-3","title":"Migration from version 2 to version 3","text":"<p>Migrating from TM2 consists of two main parts: 1) installing the lastest Tasking Manager application and setting up its unpopulated database and 2) migrating the data from the original TM2 database to the new Tasking Manager database.</p>"},{"location":"sysadmins/migration/#installation","title":"Installation","text":"<p>The method by which you install Tasking Manager on your own computer will vary, but you should follow the guide to setup a development environment.</p> <p>Ensure everything is met to start the migration: For this lunch the new Tasking Manager, go to the main homepage, and click on \"Contribute\" while watching the console. It will say there are currently no projects, which is expected since you have a skeleton database, but you should make sure no errors are thrown when the application tries checking for projects. If the page loads successfully and no errors occur, then you should be set and ready to continue.</p>"},{"location":"sysadmins/migration/#database-migration","title":"Database Migration","text":"<p>With the empty database for new Tasking Manager created, we can now migrate all the data from the TM2 installation. A database migration script is included to assist in this process. The beginning of this file contains important information regarding the assumptions of your prior database name and permissions, so please read it. That text will walk you through backing up your old TM2 database and creating a new temporary database for your TM2 data--though not required, it is recommended.</p> <p>The database migration script is available at https://github.com/hotosm/tasking-manager/blob/develop/scripts/database/migration-from-tm2-postgres.sql.</p>"},{"location":"sysadmins/migration/#after-migration","title":"After Migration","text":"<p>If you followed the instructions in the migration script, you should have three databases: the original TM one, the temporary TM one, and one for the new Tasking Manager (\"taskingmanager\"). You can rename the the new database to something more intuitive or meaningful:</p> <pre><code>psql -U my-user -c \"ALTER DATABASE taskingmanager rename to my-tasking-manager;\"\n</code></pre> <p>You can remove the temporary TM2 database:</p> <pre><code># PLEASE ONLY RUN THIS IF YOU HAVE FOLLOWED THE\n#   INSTRUCTIONS IN THE MIGRATION SCRIPT!\npsql -U my-user -c \"DROP DATABASE tm2;\"\n</code></pre> <p>It is up to you when you feel comfortable removing the original TM database. You may also want to manually <code>vacuum</code>.</p>"},{"location":"sysadmins/migration/#migration-from-version-1-to-version-2","title":"Migration from version 1 to version 2","text":"<p>There is no known upgrade path. Please inform us, if you know more.</p>"}]}