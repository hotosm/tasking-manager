name: tasking-manager-main

volumes:
  tm_db_data:
    name: tm-db-data-main

networks:
  tm-net: 
    name: tm-net

services:
  tm-db:
    image: "postgis/postgis:${POSTGIS_TAG:-14-3.3}"
    volumes:
      - tm_db_data:/var/lib/postgresql/data/
    env_file:
      - tasking-manager.env
    restart: unless-stopped
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      start_period: 35s
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - tm-net

  tm-backend:
    image: ghcr.io/hotosm/tasking-manager/backend:main
    build:
      context: .
      target: ${TARGET_TAG:-prod}
    depends_on:
      tm-db:
        condition: service_healthy
      tm-migration:
        condition: service_completed_successfully
    env_file:
      - tasking-manager.env
    restart: unless-stopped
    healthcheck:
      test: curl --fail http://localhost:5000 || exit 1
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 3s
    deploy:
      replicas: ${API_REPLICAS:-1}
      resources:
        limits:
          cpus: "1"
          memory: 1500M
        reservations:
          cpus: "1"
          memory: 100M
    labels:
      - traefik.http.routers.backend.rule=(Host(`127.0.0.1`) || Host(`localhost`)) && PathPrefix(`/api/`)
      - traefik.http.services.backend.loadbalancer.server.port=5000
    networks:
      - tm-net

  tm-migration:
    image: ghcr.io/hotosm/tasking-manager/backend:main
    build:
      context: .
    entrypoint: ["alembic", "-c", "migrations/alembic.ini", "upgrade", "head"]
    depends_on:
      tm-db:
        condition: service_healthy
    env_file:
      - tasking-manager.env
    deploy:
      replicas: ${API_REPLICAS:-1}
      resources:
        limits:
          cpus: "1"
          memory: 1500M
        reservations:
          cpus: "1"
          memory: 100M
    networks:
      - tm-net

  traefik:
    image: traefik:v2.10
    restart: always
    ports:
      - "${TM_DEV_PORT:-3000}:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      - --entrypoints.web.address=:80
      - --providers.docker=true
    networks:
      - tm-net
